{"version":3,"sources":["components/TableRow.jsx","components/Jumbo.jsx","components/TableHeader.jsx","Container/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["TableRow","props","className","src","image","alt","name","email","cell","city","Jumbo","id","value","filter","onChange","type","aria-label","aria-describedby","TableHeader","scope","onClick","sortEmployees","Home","state","people","filterArr","setState","sort","a","b","first","handleInputChange","event","target","filterEmployees","axios","get","then","res","data","results","catch","err","console","log","file","toLowerCase","arr","this","person","includes","last","map","index","key","picture","thumbnail","location","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.df8b5465.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n//component to fill in the rows\r\nconst TableRow = (props) => {\r\n  return (\r\n    <tr>\r\n      {/* image column */}\r\n      <th>\r\n        <img\r\n          className=\"avatar\"\r\n          src={props.image}\r\n          alt=\"Avatar\"\r\n        ></img>\r\n      </th>\r\n      {/* full name column */}\r\n      <th>\r\n        {props.name}\r\n      </th>\r\n      {/* email column */}\r\n      <th>{props.email}</th>\r\n      {/* cell phone number column */}\r\n      <th>{props.cell}</th>\r\n      {/* city column */}\r\n      <th>{props.city}</th>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default TableRow;\r\n","import React from \"react\";\r\n// jumbo tron component\r\nconst Jumbo = (props) => {\r\n  return (\r\n    <div className=\"jumbotron jumbotron-fluid\">\r\n      <div className=\"container\">\r\n        <h1 className=\"display-4\">Employee Tracker</h1>\r\n        <p className=\"lead\">\r\n          Click the name to sort by name or type to filter by name\r\n        </p>\r\n        <div className=\"input-group input-group-sm mb-3\">\r\n          <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\" id=\"inputGroup-sizing-sm\">\r\n              Filter Name\r\n            </span>\r\n          </div>\r\n          {/* input value that is used for filtering\r\n          passing in the onchange function and the filter input */}\r\n          <input\r\n            name=\"filter\"\r\n            value={props.filter}\r\n            onChange={props.onChange}\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            aria-label=\"Small\"\r\n            aria-describedby=\"inputGroup-sizing-sm\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Jumbo;\r\n","import React from 'react';\r\n// Table hearder component\r\nconst TableHeader = (props) => {\r\n    return (\r\n        <thead className=\"thead-dark\">\r\n            {/* The headers for the components */}\r\n            <tr>\r\n              <th scope=\"col\">Image</th>\r\n              {/* using the on click function to sortEmployees */}\r\n              <th scope=\"col\" onClick={() => props.sortEmployees()}>\r\n                <button className=\"btn btn-light\">Name</button>\r\n              </th>\r\n              <th scope=\"col\">Email</th>\r\n              <th scope=\"col\">Phone Number</th>\r\n              <th scope=\"col\">City</th>\r\n            </tr>\r\n          </thead>\r\n    );\r\n};\r\n\r\nexport default TableHeader;","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport TableRow from \"../components/TableRow\";\r\nimport Jumbo from \"../components/Jumbo\";\r\nimport TableHeader from \"../components/TableHeader\";\r\n\r\nclass Home extends Component {\r\n  \r\n  state = {\r\n    filter: \"\",\r\n    people: [],\r\n    filterArr: [],\r\n  };\r\n\r\n  //on loading the page it will generate a list of 50 random users from the randomuser api\r\n  componentDidMount() {\r\n    axios\r\n      .get(\"https://randomuser.me/api/?results=50\")\r\n      .then((res) => {\r\n        //set the state of people to the list returned\r\n        this.setState({ people: res.data.results });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n//Function to sort the employees in descending order\r\n  sortEmployees = () => {\r\n    function compare(a, b) {\r\n      //compate the first names\r\n      if (a.name.first < b.name.first) {\r\n        return -1;\r\n      }\r\n      if (a.name.first > b.name.first) {\r\n        return 1;\r\n      }\r\n      return 0;\r\n    }\r\n    //sets the people array to the newly created sorted array\r\n    this.setState({ people: this.state.people.sort(compare) });\r\n  };\r\n\r\n  //function to handle the input change in the filter input\r\n  handleInputChange = (event) => {\r\n    // Getting the value and name of the input which triggered the change\r\n    let value = event.target.value;\r\n    const name = event.target.name;\r\n\r\n    // Updating the input's state\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n    //call the filter employee function sending in the filter state\r\n    this.filterEmployees(value);\r\n  };\r\n\r\n  filterEmployees(value) {\r\n    //compare the first or last name with the inputed letters in the filter input\r\n    const file = value.toLowerCase();\r\n    const arr = this.state.people.filter(function (person) {\r\n      return (person.name.first.toLowerCase().includes(file)\r\n      || person.name.last.toLowerCase().includes(file));\r\n    });\r\n    //set the key filterArr to the filtered array\r\n    this.setState({ filterArr: arr });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        {/* jumbotron component */}\r\n        <Jumbo filter = {this.state.filter} onChange = {this.handleInputChange}/>\r\n      \r\n        <table className=\"table\">\r\n          {/* table header component */}\r\n          <TableHeader sortEmployees={this.sortEmployees}/>\r\n          <tbody>\r\n            {/* conditional to make it show up after the componentDidMount call */}\r\n            {this.state.people ? (\r\n              // Conditional to use either the filtered array or the full array\r\n              this.state.filter === \"\" ? (\r\n                //if the filter input field is empty use the people array\r\n              this.state.people.map((person, index) =>\r\n                  <TableRow\r\n                    key={index}\r\n                    image={person.picture.thumbnail}\r\n                    name={person.name.first + \" \" + person.name.last}\r\n                    email={person.email}\r\n                    cell={person.cell}\r\n                    city={person.location.city}\r\n                  />\r\n              )):\r\n              //if the filter input has something there then use the filter array that is filtered\r\n              (\r\n              this.state.filterArr.map((person, index) =>\r\n                  <TableRow\r\n                    key={index}\r\n                    image={person.picture.thumbnail}\r\n                    name={person.name.first + \" \" + person.name.last}\r\n                    email={person.email}\r\n                    cell={person.cell}\r\n                    city={person.location.city}\r\n                  />\r\n              ))\r\n            ) : (\r\n              //if there is no results\r\n              <h1>noresults</h1>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n\r\n//sorting\r\n\r\n//sort when onclick name\r\n//might add a on hover to show it is clickable or button\r\n\r\n//remeber if passing in actual call make a call back function\r\n","import React from \"react\";\nimport Home from \"./Container/Home\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col\">\n          \n          <Home />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}